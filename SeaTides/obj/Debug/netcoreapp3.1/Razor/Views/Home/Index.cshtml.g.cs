#pragma checksum "C:\Studia\Praca\SeaTides\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d5d093211adc755daa7689701b399e72eddf7716"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Studia\Praca\SeaTides\Views\_ViewImports.cshtml"
using SeaTides;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Studia\Praca\SeaTides\Views\_ViewImports.cshtml"
using SeaTides.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d5d093211adc755daa7689701b399e72eddf7716", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a735ba64e4b8fcbacde5f7641571dd3383a4d3f8", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/L.Control.SlideMenu.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Studia\Praca\SeaTides\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" integrity=\"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\"");
            BeginWriteAttribute("crossorigin", " crossorigin=\"", 235, "\"", 249, 0);
            EndWriteAttribute();
            WriteLiteral(" />\r\n<script src=\"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" integrity=\"sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==\"");
            BeginWriteAttribute("crossorigin", " crossorigin=\"", 424, "\"", 438, 0);
            EndWriteAttribute();
            WriteLiteral(@"></script>
<link rel=""stylesheet"" href=""https://unpkg.com/leaflet.markercluster@1.1.0/dist/MarkerCluster.css"" />
<link rel=""stylesheet"" href=""https://unpkg.com/leaflet.markercluster@1.1.0/dist/MarkerCluster.Default.css"" />
<script src=""https://unpkg.com/leaflet.markercluster@1.1.0/dist/leaflet.markercluster.js""></script>
<link rel=""stylesheet"" href=""http://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"">
<link rel=""stylesheet"" href=""L.Control.SlideMenu.css"">
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d5d093211adc755daa7689701b399e72eddf77165067", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d5d093211adc755daa7689701b399e72eddf77166106", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script src=""https://cdn.jsdelivr.net/npm/chart.js""></script>

<style>
    #map {
        width: 1200px;
        height: 700px;
    }
</style>

<div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""exampleModalLabel"">Modal title</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""info-div""></div>
                <canvas id=""chart_div""></canvas>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
            </div>
        </div>
   ");
            WriteLiteral(@" </div>
</div>

<div id='map'></div>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js'></script>
<script>
    var map = L.map('map', { minZoom: 2, maxZoom: 14 }).setView([55, -3.3], 5);
    var markerClusters = L.markerClusterGroup();
    var newMarkerLayer = L.markerClusterGroup();
    var newMarker = {
        portName: """",
        timeDifference: 4,
        longtitude: -55,
        latitude: -55,
        basePort: """",
        basePortName: """"
    };

    var formHtml = `
    <form>
        <div class=""form-check form-switch"">
            <input class=""form-check-input"" type=""checkbox"" id=""markPortSwitch"">
            <label class=""form-check-label"" for=""markPortSwitch""> Mark Port on the Map </label>
        </div>

        <div class=""mb-3"">
            <label for=""port1"" class=""form-label""> Port </label>
            <input type=""text"" class=""form-control"" id=""port1"" aria-describedby=""port1Help"" required>
            <div id=""port1Help"" class=""form-");
            WriteLiteral(@"text""> Your marked port name </div>
        </div>
        <div class=""mb-3"">
            <label for=""timeDifference"" class=""form-label""> Time difference </label>
            <input type=""number"" class=""form-control"" id=""timeDifference"" required>
        </div>

        <div class=""input-group mb-3"">
            <span class=""input-group-text"" id=""longtitude-description""> Longtitude </span>
            <input type=""number"" id=""longtitude"" class=""form-control"" aria-label=""Longtitude"" aria-describedby=""longtitude-description"" min=""-200"" max=""200"" readonly required>
        </div>
        <div class=""input-group mb-3"">
            <span class=""input-group-text"" id=""latitude-description""> Latitude </span>
            <input type=""number"" id=""latitude"" class=""form-control"" aria-label=""Latitude"" aria-describedby=""latitude-description"" min=""-200"" max=""200"" readonly required>
        </div>

        <div class=""mb-3"">
            <label for=""port2"" class=""form-label""> Base Port </label>
            <");
            WriteLiteral(@"input type=""text"" class=""form-control"" id=""port2"" aria-describedby=""port2Help"" readonly required>
            <div id=""port2Help"" class=""form-text""> Base port, marked on the map by leaves </div>
        </div>

        <button type=""button"" class=""btn btn-primary"" onclick=""loadJsonData()""> Submit </button>
    </form>
`;
    var slideMenu = L.control.slideMenu(formHtml, { position: 'bottomleft', menuposition: 'topright', width: '30%', height: '400px', delay: '50', icon: 'fa-chevron-left' }).addTo(map);
    console.log('slideMenu:', slideMenu);

    var markSwitch = document.getElementById('markPortSwitch');
    var latInput = document.getElementById('latitude');
    var lngInput = document.getElementById('longtitude');
    var basePortInput = document.getElementById('port2');
    var readyToMarkPort = false;

    $(markSwitch).change(function () {
        if ($(this).is(':checked')) {
            readyToMarkPort = true;
        } else {
            readyToMarkPort = false;
        }
    ");
            WriteLiteral(@"});


    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href=""https://www.openstreetmap.org/copyright"">OpenStreetMap</a> contributors'
    }).addTo(map);


    function createCustomIcon(feature, latlng) {
        var greenIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        return L.marker(latlng, { icon: greenIcon })
    }


    map.addLayer(markerClusters);
    var myChart = new Chart();

    $.ajax({
        url: 'Home/GetStations',
        success: function (data) {
            markerClusters.addLayer(L.geoJSON(data, {
                pointToLayer: createCustomIcon,
               ");
            WriteLiteral(@" onEachFeature: function (feature, layer) {
                    layer.bindTooltip('<p>Name: ' + feature.properties.name + '</p> Station Id: ' + feature.properties.id);
                    layer.on('click', function (e) {
                        if (readyToMarkPort) { 
                            basePortInput.value = feature.properties.name;
                            newMarker.basePort = feature.properties.id;
                            newMarker.basePortName = feature.properties.name;
                        }
                        else {
                            var str = ""Station: "" + feature.properties.name;
                            $('.modal-title').text(str);
                            tidalEvents = [];
                            tidalHeights = [];
                            $(feature.events).each(function (i, event) {
                                var date = new Date(event.dateTime)
                                tidalEvents.push(date.getFullYear() + '-' + (date.getMonth");
            WriteLiteral(@"() + 1) + '-' + date.getDate() + '  ' + date.getHours() + ':' + date.getMinutes());
                                tidalHeights.push(event.height);
                            });
                            var ctx = document.getElementById(""chart_div"").getContext('2d');
                            myChart.destroy();
                            myChart = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: tidalEvents,
                                    datasets: [{
                                        label: ""Tidal Height"",
                                        data: tidalHeights,
                                        borderColor: 'rgba(75, 192, 192, 0.2)',
                                        backgroundColor: 'rgba(75, 192, 192, 1)',
                                        fill: false,
                                        tension: 0.4
                                    }]
         ");
            WriteLiteral(@"                       },
                                options: {
                                    scales: {
                                        y: {
                                            title: {
                                                display: true,
                                                align: ""start"",
                                                text: ""[m]""
                                            }
                                        }
                                    }
                                }
                            });
                            $('#exampleModal').modal();
                        }
                    });
                }
            }));
        },
    });

    $.ajax({
        url: 'Home/GetUserStations',
        success: function (data) {
            $(data).each(function (ind, item) {
                var lat = item.latitude;
                var long = item.longtitude;
                var point ");
            WriteLiteral(@"= L.marker([lat, long]).bindPopup(""Station: "" + item.portName + ""<br> Base port Id:"" + item.basePort).on('click', function (e) {
                    var str = ""Station: "" + item.portName;
                    $('.modal-title').text(str);
                    $('.info-div').html(""Time difference: "" + item.timeDifference + ""<br> Base port name: "" + item.basePortName);
                    $.ajax({
                        type: ""POST"",
                        url: 'Home/GetStationEventsById',
                        data: { id: item.basePort },
                        success: function (events)
                        {
                            tidalEvents = [];
                            tidalHeights = [];
                            $(events).each(function (i, event) {
                            var date = new Date(event.dateTime)
                            tidalEvents.push(date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + '  ' + date.getHours() + ':' + date.getMinutes(");
            WriteLiteral(@"));
                                tidalHeights.push(event.height);
                               
                            });
                            var ctx = document.getElementById(""chart_div"").getContext('2d');
                            myChart.destroy();
                            myChart = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: tidalEvents,
                                    datasets: [{
                                        label: ""Tidal Height"",
                                        data: tidalHeights,
                                        borderColor: 'rgba(75, 192, 192, 0.2)',
                                        backgroundColor: 'rgba(75, 192, 192, 1)',
                                        fill: false,
                                        tension: 0.4
                                    }]
                                },
                    ");
            WriteLiteral(@"            options: {
                                    scales: {
                                        y: {
                                            title: {
                                                display: true,
                                                align: ""start"",
                                                text: ""[m]""
                                            }
                                        }
                                    }
                                }
                            })
                        } 
                    });
                    $('#exampleModal').modal();
            });
                markerClusters.addLayer(point);
            });
        },
    });

    map.addLayer(newMarkerLayer);
    map.on('click',
        function (e) {
            if (!readyToMarkPort) return;
            newMarkerLayer.clearLayers();
            var coord = e.latlng.toString().split(',');
            var lat = coord[0].split");
            WriteLiteral(@"('(');
            var lng = coord[1].split(')');
            newMarker.latitude = parseFloat(lat[1]);
            newMarker.longtitude = parseFloat(lng[0]);
            latInput.value = parseFloat(lat[1]);
            lngInput.value = parseFloat(lng[0]);
            newMarkerLayer.addLayer(L.marker([lat[1], lng[0]]).bindPopup(""Localization of new port""));
        }
    );

    function loadJsonData() {
        newMarker.portName = document.getElementById(""port1"").value,
            newMarker.timeDifference = document.getElementById(""timeDifference"").value,
            newMarker.longtitude = document.getElementById(""longtitude"").value,
            newMarker.latitude = document.getElementById(""latitude"").value,
        $.ajax({
            type: ""POST"",
            url: ""Home/SavePortData"",
            data: { newPortData: JSON.stringify(newMarker)}, //Change inputData to match the argument in your controller method
        });
        window.location.reload(true);
    };
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
